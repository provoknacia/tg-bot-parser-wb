import requests
import json
import time
import threading
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('wildberries_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATA_FILE = 'wildberries_extended_data.json'
UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
last_update_time = None
data_lock = threading.Lock()
current_data = {
    "–¢–æ–≤–∞—Ä—ã": [],
    "total": 0,
    "version": 0,
    "payloadVersion": 0
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_QUERY, SEARCH_ARTICLE = range(2)

headers = {
    'accept': '*/*',
    'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3NTE0NjAyODIsInVzZXIiOiIxMjMwMDExOTAiLCJzaGFyZF9rZXkiOiIxOCIsImNsaWVudF9pZCI6IndiIiwic2Vzc2lvbl9pZCI6ImFlYmM3ZDBkMzI0NTQwYmU5ZmU1ZmRjMGFhNDVhYzEzIiwidmFsaWRhdGlvbl9rZXkiOiIzNTFmOTY5MjBkN2I0ZWNiNzkwZThiNzgzNWFlMTI4OGQ5YTZmZTQ2ODY3MWIxN2MyNjg4YmJkYzU3ZTIwYzg2IiwicGhvbmUiOiJ0R3U3czA1UmFpZ2ZieVdUTWlFWmJRPT0iLCJ1c2VyX3JlZ2lzdHJhdGlvbl9kdCI6MTY5NDAxOTgyOCwidmVyc2lvbiI6Mn0.bZ87a45w-t6_wRlQe9W37hnAPSq22QNMEddtvqYbNrGV-fKnByasQtIYZuui5Aa1r7qvKWjHGn5Doewzv4dMobZtT-SkmQBK49OORV7Yt4mK6uzutP1fs445fPibCn7voH3coDUIdFTESkVFby3Kr-XzIFTsIMrjaij1EOIYzCKvTrWtO8Jy95J-1iQeEzws26h8XXlZDyKsf2wOA1Kp15bOgPBOnxM_Ndsai-pnnd4hH-tk5g7Xgf5u_Hpbhtg16niFfRpqn06S4vuF786gclipBPc68oRMppJzgFiNgx8LSvnYr-JXLs8VLVPFk3FmnJDpzLhefNa9oRtKhG0ZCw',
    'origin': 'https://www.wildberries.ru',
    'priority': 'u=1, i',
    'referer': 'https://www.wildberries.ru/catalog/0/search.aspx',
    'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
    'x-queryid': 'qid274271218174533698420250704114744',
    'x-userid': '123001190',
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.",
        reply_markup=ReplyKeyboardMarkup([["/search", "/last_update"], ["/manual_update", "/help"]], one_time_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    logger.info(f"User {update.effective_user.id} requested help")
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
        "/last_update - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "/manual_update - –í—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {UPDATE_INTERVAL//60} –º–∏–Ω—É—Ç."
    )
    await update.message.reply_text(help_text)

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞."""
    logger.info(f"User {update.effective_user.id} started search")
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        reply_markup=ReplyKeyboardRemove()
    )
    return SEARCH_QUERY

async def search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª."""
    search_query = update.message.text
    context.user_data['search_query'] = search_query
    logger.info(f"User {update.effective_user.id} set search query: {search_query}")
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    return SEARCH_ARTICLE

async def search_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    user = update.effective_user
    try:
        product_id = int(update.message.text)
        search_query = context.user_data.get('search_query', '')
        
        logger.info(f"User {user.id} searching for product ID: {product_id} with query: '{search_query}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        fetch_data(search_query)
        
        product = find_product_by_id(product_id)
        
        if product:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ —Ç–æ–≤–∞—Ä–∞
            message = f"üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n"
            message += f"üõçÔ∏è <b>{product.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
            message += f"üîπ –ê—Ä—Ç–∏–∫—É–ª: <b>{product.get('–ê–π–¥–∏', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
            message += f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: <b>{product.get('–ë—Ä–µ–Ω–¥', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
            message += f"üé® –¶–≤–µ—Ç: <b>{product.get('–¶–≤–µ—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
            message += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{product.get('–†–µ–π—Ç–∏–Ω–≥', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
            message += f"üí¨ –û—Ç–∑—ã–≤—ã: <b>{product.get('–û—Ç–∑—ã–≤—ã', '0')}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
            message += f"üí∞ –¶–µ–Ω–∞: <b>{product.get('–¶–µ–Ω–∞', {}).get('—Ü–µ–Ω–∞', '0')} —Ä—É–±.</b>\n"
            if product.get('–¶–µ–Ω–∞', {}).get('—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞', 0) > 0:
                message += f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <s>{product['–¶–µ–Ω–∞']['—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞']} —Ä—É–±.</s>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
            if '–†–∞–∑–º–µ—Ä—ã' in product and product['–†–∞–∑–º–µ—Ä—ã']:
                message += "\nüìè <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>\n"
                for size in product['–†–∞–∑–º–µ—Ä—ã']:
                    message += f"  ‚ñ™ {size.get('–†–∞–∑–º–µ—Ä', '')} - {size.get('–¶–µ–Ω–∞', '')} —Ä—É–±. (–æ—Å—Ç–∞–ª–æ—Å—å: {size.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)} —à—Ç.)\n"
            else:
                message += "\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += "\nüìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            message += f"  üè¨ –°–∫–ª–∞–¥: {product.get('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"  üöö –ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥: {product.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂', '0')}\n"
            message += f"  üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ: {product.get('–¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ', '0')} —à—Ç.\n"
            message += f"  üñºÔ∏è –§–æ—Ç–æ: {product.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫', '0')}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if '–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' in product and product['–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']:
                ad_data = product['–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']
                message += "\nüì¢ <b>–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                message += f"  ‚Ä¢ CPM (—Ü–µ–Ω–∞ –∑–∞ 1000 –ø–æ–∫–∞–∑–æ–≤): {ad_data.get('cpm', 'N/A')}\n"
                message += f"  ‚Ä¢ –ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è: {'–î–∞' if ad_data.get('promotion', 0) == 1 else '–ù–µ—Ç'}\n"
                message += f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–æ–º–æ: {ad_data.get('promoPosition', 'N/A')}\n"
                message += f"  ‚Ä¢ –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {ad_data.get('position', 'N/A')}\n"
                message += f"  ‚Ä¢ ID —Ä–µ–∫–ª–∞–º—ã: {ad_data.get('advertId', 'N/A')}\n"
                message += f"  ‚Ä¢ –¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {ad_data.get('tp', 'N/A')}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            await update.message.reply_html(message)
            logger.info(f"Sent product info to user {user.id}")
        else:
            await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'.")
            logger.warning(f"Product {product_id} not found for user {user.id}")
        
    except ValueError:
        error_msg = "–û—à–∏–±–∫–∞: –∞—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        await update.message.reply_text(error_msg)
        logger.error(f"User {user.id} entered invalid article number")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    logger.info(f"User {update.effective_user.id} canceled action")
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([["/search", "/last_update"], ["/manual_update", "/help"]], one_time_keyboard=True)
    )
    return ConversationHandler.END

async def last_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"User {update.effective_user.id} requested last update time")
    if last_update_time:
        message = f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_time.strftime('%Y-%m-%d %H:%M:%S')}"
        if 'search_query' in current_data:
            message += f"\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{current_data['search_query']}'"
    else:
        message = "–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å"
    await update.message.reply_text(message)

async def manual_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"User {update.effective_user.id} requested manual update")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    context.user_data['awaiting_query'] = True
    return SEARCH_QUERY

def fetch_data(search_query=''):
    global last_update_time, current_data
    
    params = {
        'ab_testing': 'false',
        'appType': '1',
        'curr': 'rub',
        'dest': '123585553',
        'hide_dtype': '13',
        'lang': 'ru',
        'page': '1',
        'query': search_query,
        'resultset': 'catalog',
        'sort': 'popular',
        'spp': '30',
        'suppressSpellcheck': 'false',
        'uclusters': '1',
        'uiv': '0',
        'uv': 'AQQAAQIBAAIEAAMDAAoACcUxSAbBr0RgRDk2s0cvu0xACDiwxMbAfLdeu7O-okN0ulK4HbYAPCdFpSUQPHvDpLAEPX46t8juvPjIdTacwHbHuTwAwFu2P8CuxepAZUQyxhVERqXcwb2_48RHR469BUYlSj9DTMWZSFo1A0AUPhDHvDiNR6ZCNDzGOyrFrMM7Rjy_f8GdM7NFVDVPRTrAJLkUPlu76lnMRRq_h0gDSAlAxUJIxoFAbMBfvD3CTsWTwXVGtsWbPkPBqThLvETA7LR9vYdJaL4PRClIaMa9ybsxEz-FxaXDncbtuX04xkIvNUxFOUeDsR09U76vxSHAOkGVvgrEvUFLNQ01dC5kxBwzNwEIRjeIMpcxpjC1AAA',
    }

    try:
        logger.info(f"Fetching data for query: '{search_query}'")
        response = requests.get('https://search.wb.ru/exactmatch/ru/common/v13/search', params=params, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            
            new_data = {
                "–¢–æ–≤–∞—Ä—ã": [],
                "total": data.get("total", 0),
                "version": data.get("version", 0),
                "payloadVersion": data.get("payloadVersion", 0),
                "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "search_query": search_query
            }
            
            if 'data' in data and 'products' in data['data']:
                for product in data['data']['products']:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if 'log' in product:
                        logger.info(f"Advert data for product {product.get('id', 'N/A')}: {product['log']}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
                    sizes = []
                    if 'sizes' in product:
                        for size in product['sizes']:
                            size_info = {
                                "–†–∞–∑–º–µ—Ä": size.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                                "–¶–µ–Ω–∞": size.get('price', {}).get('product', 0) / 100 if size.get('price', {}).get('product') else 0,
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": size.get('stocks', [{}])[0].get('qty', 0)
                            }
                            sizes.append(size_info)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–µ
                    color = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    if 'colors' in product and product['colors']:
                        color = product['colors'][0].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    
                    product_info = {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": product.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        "–ê–π–¥–∏": product.get('id', 0),
                        "–ë—Ä–µ–Ω–¥": product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        "–¶–≤–µ—Ç": color,
                        "–¶–µ–Ω–∞": {
                            "—Ü–µ–Ω–∞": product.get('priceU', 0) / 100 if product.get('priceU') else 0,
                            "—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞": product.get('salePriceU', 0) / 100 if product.get('salePriceU') else 0
                        },
                        "–†–∞–∑–º–µ—Ä—ã": sizes,
                        "–†–µ–π—Ç–∏–Ω–≥": product.get('rating', 0),
                        "–û—Ç–∑—ã–≤—ã": product.get('feedbacks', 0),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂": product.get('volume', 0),
                        "–¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ": product.get('totalQuantity', 0),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫": product.get('pics', 0),
                        "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞": product.get('wh', 0),
                        "–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è": product.get('root', 0),
                        "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤": product.get('reviewRating', 0),
                        "–û—Ç–∑—ã–≤—ã (–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞)": product.get('nmFeedbacks', 0),
                        "–ü–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞": product.get('rank', 0),
                        "–í–µ—Ä—Å–∏—è": product.get('version', 0),
                        "–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": product.get('log', None)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    }
                    new_data["–¢–æ–≤–∞—Ä—ã"].append(product_info)
            
            with data_lock:
                current_data = new_data
            
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(new_data, f, ensure_ascii=False, indent=4)
            
            last_update_time = datetime.now()
            logger.info(f"Data updated at {last_update_time.strftime('%H:%M:%S')}")
            logger.info(f"Search query: '{search_query}'")
            logger.info(f"Received {len(new_data['–¢–æ–≤–∞—Ä—ã'])} products from {new_data['total']}")
        else:
            logger.error(f"Request error: {response.status_code}")
            logger.error(f"Server response: {response.text[:200]}...")
    except Exception as e:
        logger.error(f"Error while fetching data: {str(e)}", exc_info=True)

def auto_update():
    while True:
        try:
            # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            search_query = current_data.get('search_query', '')
            logger.info(f"Auto-updating data with query: '{search_query}'")
            fetch_data(search_query)
            time.sleep(UPDATE_INTERVAL)
        except Exception as e:
            logger.error(f"Error in auto_update: {str(e)}", exc_info=True)
            time.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

def find_product_by_id(product_id):
    with data_lock:
        for product in current_data["–¢–æ–≤–∞—Ä—ã"]:
            if product["–ê–π–¥–∏"] == product_id:
                return product
    return None

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("Starting bot...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        update_thread = threading.Thread(target=auto_update, daemon=True)
        update_thread.start()
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        fetch_data()
        
        # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        application = Application.builder().token("–í–ê–® –¢–û–ö–ï–ù").build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("last_update", last_update))
        application.add_handler(CommandHandler("manual_update", manual_update))
        
        # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("search", search_start)],
            states={
                SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_query)],
                SEARCH_ARTICLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_product)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        application.add_handler(conv_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot is running...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.critical(f"Bot crashed: {str(e)}", exc_info=True)

if __name__ == "__main__":
    main()
